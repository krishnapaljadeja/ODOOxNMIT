generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  username  String   @unique
  isBanned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products  Product[]
  cart      Cart?
  purchases Purchase[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  price       Float
  imageUrl    String?  // Keep for backward compatibility
  images      String[] // Array of image URLs
  sellerId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  purchaseItems PurchaseItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)

  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Purchase {
  id          String   @id @default(cuid())
  buyerId     String
  totalAmount Float
  purchaseDate DateTime @default(now())
  status      String   @default("completed") // completed, pending, cancelled

  // Relations
  buyer       User           @relation(fields: [buyerId], references: [id])
  items       PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id        String  @id @default(cuid())
  purchaseId String
  productId String
  quantity  Int
  price     Float   // Snapshot of price at time of purchase

  // Relations
  purchase  Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}
